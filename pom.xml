<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.gematik</groupId>
    <artifactId>testhub</artifactId>
    <version>1.0.1</version>
    <packaging>pom</packaging>
    <name>Parent Project for the gematik TI 2.0 Testhub</name>
    <inceptionYear>2025</inceptionYear>

    <modules>
        <module>lib/card-client-lib-java</module>
        <module>lib/zeta-client-lib-java</module>
        <module>lib/popp-client-lib-java</module>
        <module>lib/vsdm-fhir-lib-java</module>
        <module>client/card-terminal-client-simservice</module>
        <module>client/vsdm-client-simservice-java</module>
        <module>server/popp-server-mockservice</module>
        <module>server/vsdm-server-simservice</module>
        <module>server/zeta-pep-server-mockservice</module>
        <module>server/zeta-pdp-server-mockservice</module>
        <module>test/vsdm-testsuite</module>
        <module>coverage-report</module>
    </modules>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <maven.compiler.release>21</maven.compiler.release>

        <version.maven-antrun-plugin>3.1.0</version.maven-antrun-plugin>
        <version.maven.surefire>3.5.4</version.maven.surefire>
        <version.maven.failsafe>3.3.1</version.maven.failsafe>
        <version.maven.jacoco>0.8.14</version.maven.jacoco>
        <version.tiger>4.0.9</version.tiger>
        <version.serenity>4.2.30</version.serenity>
        <version.gem.testdata>1.0.9</version.gem.testdata>
        <version.springdoc>2.8.13</version.springdoc>
        <version.spring-boot>3.5.6</version.spring-boot>
        <version.gem.bbriccs>0.7.0</version.gem.bbriccs>
        <version.pact.consumer>4.6.17</version.pact.consumer>
        <version.gatling.highcharts>3.13.5</version.gatling.highcharts>
        <mycila.license-maven-plugin.version>5.0.0</mycila.license-maven-plugin.version>
        <version.maven.format>2.29</version.maven.format>
        <version.maven.surefire>3.5.2</version.maven.surefire>

        <sonar.coverage.jacoco.xmlReportPaths>
            ${project.basedir}/coverage-report/target/site/jacoco-aggregate/jacoco.xml
        </sonar.coverage.jacoco.xmlReportPaths>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <skip.unittests>false</skip.unittests>
        <skip.inttests>true</skip.inttests>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>de.gematik.test</groupId>
                <artifactId>tiger-bom</artifactId>
                <version>${version.tiger}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
                <version>${version.springdoc}</version>
            </dependency>
            <dependency>
                <groupId>de.gematik.test</groupId>
                <artifactId>gem-testdata</artifactId>
                <version>${version.gem.testdata}</version>
            </dependency>

            <!-- TI 2.0 Testhub -->
            <dependency>
                <groupId>de.gematik.ti20.client</groupId>
                <artifactId>card-client-lib</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>de.gematik.ti20.client</groupId>
                <artifactId>zeta-client-lib</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>de.gematik.ti20.client</groupId>
                <artifactId>popp-client-lib</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>de.gematik.ti20.vsdm</groupId>
                <artifactId>vsdm-fhir-lib</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!-- BBRICCS -->
            <dependency>
                <groupId>de.gematik.bbriccs</groupId>
                <artifactId>fhir-bricks</artifactId>
                <version>${version.gem.bbriccs}</version>
            </dependency>
            <dependency>
                <groupId>de.gematik.bbriccs</groupId>
                <artifactId>fhir-builder-brick</artifactId>
                <version>${version.gem.bbriccs}</version>
            </dependency>
            <dependency>
                <groupId>de.gematik.bbriccs</groupId>
                <artifactId>fhir-codec-brick</artifactId>
                <version>${version.gem.bbriccs}</version>
            </dependency>
            <dependency>
                <groupId>de.gematik.bbriccs</groupId>
                <artifactId>fhir-de-basisprofil-r4-brick</artifactId>
                <version>${version.gem.bbriccs}</version>
            </dependency>
            <dependency>
                <groupId>de.gematik.bbriccs</groupId>
                <artifactId>fd-fhir-client-brick</artifactId>
                <version>${version.gem.bbriccs}</version>
            </dependency>
            <dependency>
                <groupId>de.gematik.bbriccs</groupId>
                <artifactId>rest-client-brick</artifactId>
                <version>${version.gem.bbriccs}</version>
            </dependency>
            <dependency>
                <groupId>de.gematik.bbriccs</groupId>
                <artifactId>unit-test-utility-brick</artifactId>
                <version>${version.gem.bbriccs}</version>
            </dependency>
            <dependency>
                <groupId>au.com.dius.pact.consumer</groupId>
                <artifactId>junit5</artifactId>
                <version>${version.pact.consumer}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.gatling.highcharts</groupId>
                <artifactId>gatling-charts-highcharts</artifactId>
                <version>${version.gatling.highcharts}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>net.serenity-bdd</groupId>
                <artifactId>serenity-screenplay-rest</artifactId>
                <version>${version.serenity}</version>
            </dependency>
            <dependency>
                <groupId>net.serenity-bdd</groupId>
                <artifactId>serenity-ensure</artifactId>
                <version>${version.serenity}</version>
            </dependency>

            <dependency>
                <groupId>javax.xml.ws</groupId>
                <artifactId>jaxws-api</artifactId>
                <version>2.3.1</version>
            </dependency>
            <dependency>
                <groupId>javax.xml.soap</groupId>
                <artifactId>javax.xml.soap-api</artifactId>
                <version>1.4.0</version>
            </dependency>
            <dependency>
                <groupId>javax.xml.bind</groupId>
                <artifactId>jaxb-api</artifactId>
                <version>2.3.1</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.19.0</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-test</artifactId>
            <scope>test</scope>
            <version>${version.spring-boot}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <!--        <dependency>-->
        <!--            <groupId>de.gematik.bbriccs</groupId>-->
        <!--            <artifactId>utility-bricks</artifactId>-->
        <!--            <version>${version.gem.bbriccs}</version>-->
        <!--            <type>pom</type>-->
        <!--            <scope>provided</scope>-->
        <!--        </dependency>-->
        <!--        -->
        <!--        <dependency>-->
        <!--            <groupId>de.gematik.bbriccs</groupId>-->
        <!--            <artifactId>restful-bricks</artifactId>-->
        <!--            <version>${version.gem.bbriccs}</version>-->
        <!--            <type>pom</type>-->
        <!--            <scope>provided</scope>-->
        <!--        </dependency>-->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.spotify.fmt</groupId>
                <artifactId>fmt-maven-plugin</artifactId>
                <version>${version.maven.format}</version>
                <configuration>
                    <sourceDirectory>src/main/java</sourceDirectory>
                    <testSourceDirectory>src/test/java</testSourceDirectory>
                    <verbose>false</verbose>
                    <filesNamePattern>.*\.java</filesNamePattern>
                    <skip>false</skip>
                    <skipSortingImports>false</skipSortingImports>
                    <style>google</style>
                </configuration>
                <executions>
                    <execution>
                        <id>format-code</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>format</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- plugins required by gematik -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${version.maven.jacoco}</version>
                    <executions>
                        <!-- set arg line property for surefire -->
                        <execution>
                            <id>default-prepare-agent</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <!-- set arg line property for failsafe -->
                        <execution>
                            <id>default-prepare-agent-integration</id>
                            <goals>
                                <goal>prepare-agent-integration</goal>
                            </goals>
                            <configuration>
                                <propertyName>failsafeArgLine</propertyName>
                            </configuration>
                        </execution>
                        <execution>
                            <id>default-merge-unit-and-integration</id>
                            <phase>post-integration-test</phase>
                            <goals>
                                <goal>merge</goal>
                            </goals>
                            <configuration>
                                <fileSets>
                                    <fileSet>
                                        <directory>${project.build.directory}</directory>
                                        <includes>
                                            <include>*.exec</include>
                                        </includes>
                                    </fileSet>
                                </fileSets>
                                <destFile>${project.build.directory}/jacoco-aggregate.exec</destFile>
                            </configuration>
                        </execution>
                        <execution>
                            <id>default-report-aggregate</id>
                            <phase>post-integration-test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                            <configuration>
                                <dataFile>${project.build.directory}/jacoco-aggregate.exec</dataFile>
                                <outputDirectory>${project.reporting.outputDirectory}/jacoco-aggregate
                                </outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${version.maven.surefire}</version>
                    <configuration>
                        <argLine>${argLine} -Dfile.encoding=UTF-8</argLine>
                        <properties>
                            <configurationParameters>
                                junit.jupiter.execution.parallel.mode.default = same_thread
                                junit.jupiter.execution.parallel.mode.classes.default = concurrent
                            </configurationParameters>
                        </properties>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <version>5.0.0.4389</version>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${version.spring-boot}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                    <configuration>
                        <compilerArgs>
                            <arg>-parameters</arg>
                        </compilerArgs>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>com.mycila</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>${mycila.license-maven-plugin.version}</version>
                    <configuration>
                        <licenseSets>
                            <licenseSet>
                                <header>license.header.txt</header>
                                <includes>
                                    <include>**/target/**</include>
                                    <include>**/src/**</include>
                                    <include>**/target/generated-*/**</include>
                                </includes>
                                <excludes>
                                    <exclude>**/*.properties</exclude>
                                    <exclude>**/*.yaml</exclude>
                                    <exclude>**/*.yml</exclude>
                                    <exclude>**/*.xml</exclude>
                                    <exclude>**/*.txt</exclude>
                                    <exclude>**/*.cert</exclude>
                                    <exclude>**/*.tgr</exclude>
                                    <exclude>**/*.mjs</exclude>
                                    <exclude>**/*.bks</exclude>
                                    <exclude>**/*.crt</exclude>
                                    <exclude>**/*.browserslistrc</exclude>
                                    <exclude>**/*.factories</exclude>
                                    <exclude>**/*.feature</exclude>
                                    <exclude>**/*.jtmpl</exclude>
                                    <exclude>**/*.ansi</exclude>
                                    <exclude>**/*.curl</exclude>
                                    <exclude>**/*.map</exclude>
                                    <exclude>**/*.env</exclude>
                                    <exclude>**/*.pem</exclude>
                                    <exclude>**/*.eml</exclude>
                                    <exclude>**/*.bin</exclude>
                                    <exclude>**/*.b64</exclude>
                                    <exclude>**/*.p8</exclude>
                                    <exclude>**/*.encrypted</exclude>
                                    <exclude>**/*.base64</exclude>
                                    <exclude>**/*.pkcs8</exclude>
                                    <exclude>**/*.conf</exclude>
                                    <exclude>**/*.key</exclude>
                                    <exclude>**/dist/assets/*</exclude>
                                    <exclude>**/bootstrap.min.css</exclude>
                                    <exclude>**/bootstrap.bundle.min.js</exclude>
                                </excludes>
                                <useDefaultExcludes>true</useDefaultExcludes>
                            </licenseSet>
                        </licenseSets>
                        <skipExistingHeaders>true</skipExistingHeaders>
                        <mapping>
                            <vue>XML_STYLE</vue>
                        </mapping>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>com.mycila</groupId>
                            <artifactId>license-maven-plugin-git</artifactId>
                            <!-- make sure you use the same version as license-maven-plugin -->
                            <version>${mycila.license-maven-plugin.version}</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <id>license headers for sources</id>
                            <goals>
                                <goal>format</goal>
                            </goals>
                            <phase>generate-sources</phase>
                        </execution>
                        <execution>
                            <id>license headers for test sources</id>
                            <goals>
                                <goal>format</goal>
                            </goals>
                            <phase>generate-test-sources</phase>
                        </execution>
                    </executions>
                </plugin>

            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <!-- Create Docker Image when profile is active -->
        <profile>
            <id>docker</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>${version.maven-antrun-plugin}</version>
                        <executions>
                            <execution>
                                <id>create-docker-image</id>
                                <!-- must run after spring boot repackage, or we have an incomplete jar -->
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target
                                        if="image.docker.tag"
                                        name="build-service-docker-image"
                                            description="Task to build services docker images">
                                        <echo>####### Building '${image.docker.tag}'</echo>
                                        <exec executable="docker" dir="${project.basedir}" failonerror="true">
                                            <arg value="build" />
                                            <arg value="--no-cache" />
                                            <arg value="--tag" />
                                            <arg value="${image.docker.tag}" />
                                            <arg value="--file" />
                                            <arg value="docker/Dockerfile" />
                                            <arg value="." />
                                        </exec>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
